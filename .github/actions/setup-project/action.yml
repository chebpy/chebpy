name: 'Setup Project'
description: 'Setup the project'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'

outputs:
  pyproject_exists:
    description: 'Flag indicating whether pyproject.toml exists'
    value: ${{ steps.check_pyproject.outputs.exists }}

runs:
  using: 'composite'
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ inputs.python-version }}
        cache-dependency-glob: "**/*requirements*.txt,**/*requirements*.in,**/*constraints*.txt,**/*constraints*.in,**/pyproject.toml,**/uv.lock"
      
    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ github.token }}
    
    - name: Render the project
      if: hashFiles('tests/resources/render.yml') != ''
      shell: bash
      run: |
        pip install copier
        
        # Render the current folder in-place
        copier copy . . \
          --data-file ./tests/resources/render.yml \
          --force \
          --overwrite \
          --quiet
        
        # Delete all remaining .jinja files
        find . -type f -name "*.jinja" -exec rm -f {} +
        
        # Delete all folders that still contain {{ ... }}
        find . -depth -type d -name "*{{*}}*" -exec rm -rf {} +
        
        ls -R
        
    - name: Check for pyproject.toml
      id: check_pyproject
      shell: bash
      run: |
        if [ -f "pyproject.toml" ]; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Build the virtual environment
      shell: bash
      run: uv venv --python ${{ inputs.python-version }}

    - name: "Build the virtual environment for ${{ github.repository }}"
      shell: bash
      run: |
        if [ -f "pyproject.toml" ]; then
          uv sync --all-extras
        else
          echo "No pyproject.toml found, skipping package installation"
        fi
