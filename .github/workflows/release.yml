# Manual Release Workflow for Python Package using Hatch and
# Trusted Publisher (OIDC)
#
# This workflow implements a secure, maintainable release pipeline
# by separating concerns:
#   - üîñ Tagging the release (Git tag)
#   - üèóÔ∏è Building the package with Hatch
#   - üöÄ Publishing to PyPI using OIDC (no passwords or secrets)
#
# üîê Security:
#   - No PyPI credentials are stored; relies on Trusted Publishing via GitHub OIDC.
#
# üìÑ Requirements:
#   - `pyproject.toml` with a top-level `version = "..."`
#   - Package is registered on PyPI as a Trusted Publisher with this repository
#
# ‚úÖ To trigger:
#   - Go to the "Actions" tab
#   - Run this workflow manually with a tag input like `v1.2.3`

name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write  # Needed to create releases
  id-token: write  # Needed for OIDC authentication with PyPI

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

  build:
    name: Build with Hatch
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.13'

      - name: Install Hatch
        run: |
          pip install --upgrade pip
          pip install hatch

      - name: Set version from tag in pyproject.toml
        run: |
          version=${{ github.event.inputs.tag }}
          version=${version#v}
          echo "Setting version to $version"
          sed -i.bak "s/^version = .*/version = \"$version\"/" pyproject.toml
          rm pyproject.toml.bak

      - name: Build Package
        run: hatch build

      - name: Upload dist/
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/


  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [tag, build]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download dist artifact (if any)
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Create GitHub Release with artifacts
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          files: dist/*

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    needs: [build, tag]

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
