# This file is part of the tschm/.config-templates repository
# (https://github.com/tschm/.config-templates).
#
# Manual Release Workflow for Python Package using Hatch and
# Trusted Publisher (OIDC)
#
# This workflow implements a secure, maintainable release pipeline
# by separating concerns:
#   - 🔖 Tagging the release (Git tag)
#   - 🏗️ Building the package with Hatch
#   - 🚀 Publishing to PyPI using OIDC (no passwords or secrets)
#
# 🔐 Security:
#   - No PyPI credentials are stored; relies on Trusted Publishing via GitHub OIDC.
#
# 📄 Requirements:
#   - `pyproject.toml` with a top-level `version = "..."`
#   - Package is registered on PyPI as a Trusted Publisher with this repository
#
# ✅ To trigger:
#   - Go to the "Actions" tab
#   - Run this workflow manually with a tag input like `v1.2.3`

name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write  # Needed to create releases
  id-token: write  # Needed for OIDC authentication with PyPI

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: hashFiles('pyproject.toml') != ''
        run: |
          version=${{ github.event.inputs.tag }}
          version=${version#v}
          echo "Setting version to $version"
          sed -i.bak "s/^version = .*/version = \"$version\"/" pyproject.toml
          rm pyproject.toml.bak

          task build:build -s

      - name: Upload dist artifact
        # not tested at runtime!
        if: hashFiles('pyproject.toml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [tag, build]

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist
        continue-on-error: true

      - name: Create GitHub Release with artifacts
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          files: "dist/**"

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    needs: [build, tag]

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist
        continue-on-error: true

      - name: Check if dist contains artifacts
        id: check_dist
        run: |
          if [[ ! -d dist ]]; then
            echo "::warning::No folder dist/. Skipping PyPI publish."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.check_dist.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
