name: "Marimo"

on:
  push

jobs:
  # Parse .env and build matrix of notebooks
  parse-env:
    runs-on: ubuntu-latest
    outputs:
      marimo-folder: ${{ steps.export.outputs.MARIMO_FOLDER }}
      use-uv-run: ${{ steps.export.outputs.USE_UV_RUN || 'false' }}
      notebook-list: ${{ steps.notebooks.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Parse .env and export variables
        id: export
        run: |
          set -a
          source .env
          echo "MARIMO_FOLDER=$MARIMO_FOLDER" >> "$GITHUB_OUTPUT"
          USE_UV_RUN=${USE_UV_RUN:-false}
          echo "USE_UV_RUN=$USE_UV_RUN" >> "$GITHUB_OUTPUT"
          set +a
        shell: bash

      - name: Find notebooks and build matrix
        id: notebooks
        run: |
          NOTEBOOK_DIR="${{ steps.export.outputs.MARIMO_FOLDER }}"
          echo "Searching notebooks in: $NOTEBOOK_DIR"
          notebooks=$(find "$NOTEBOOK_DIR" -name "*.py" -print0 | xargs -0 -n1 echo | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$notebooks" >> "$GITHUB_OUTPUT"
        shell: bash

  # One job per notebook using matrix
  test-notebooks:
    runs-on: ubuntu-latest
    needs: parse-env
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.parse-env.outputs.notebook-list) }}
    name: Run notebook ${{ matrix.notebook }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Set up virtualenv and install dependencies
        run: |
          set -e
          uv venv .venv
          source .venv/bin/activate
          uv sync --all-extras
          uv pip install -e . coverage marimo
          uv pip list
        shell: bash

      - name: Run notebook with coverage
        run: |
          set -e
          source .venv/bin/activate
          NOTEBOOK="${{ matrix.notebook }}"
          echo "Running $NOTEBOOK"
          
          if [ "${{ needs.parse-env.outputs.use-uv-run }}" = "true" ]; then
            coverage run --source=chebpy --parallel-mode $(which uv) run "$NOTEBOOK"
          else
            coverage run --source=chebpy --parallel-mode "$NOTEBOOK"
          fi
        shell: bash

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.notebook }}
          path: .coverage.*
          if-no-files-found: error

  # Combine and report test coverage
  coverage-report:
    runs-on: ubuntu-latest
    needs: test-notebooks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Download all coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage_data
          merge-multiple: true

      - name: Combine and report coverage
        run: |
          pip install coverage
          coverage combine coverage_data
          coverage report
          coverage xml
        shell: bash

      - name: Upload coverage XML (for Codecov or similar)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
