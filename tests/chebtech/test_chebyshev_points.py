"""Unit-tests for Chebtech2 Chebyshev points functionality.

This module contains tests for the Chebyshev points functionality in Chebtech2,
including the _chebpts method and the vals2coeffs and coeffs2vals transformations.
"""

import numpy as np
import pytest

from chebpy.core.chebtech import Chebtech2

from .conftest import eps, scaled_tol

# aliases
_vals2coeffs = Chebtech2._vals2coeffs
_coeffs2vals = Chebtech2._coeffs2vals


def test_chebpts_0():
    """Test Chebyshev points with size 0.

    This test verifies that calling _chebpts with size 0 returns an empty array.
    """
    assert Chebtech2._chebpts(0).size == 0


def test_vals2coeffs_empty():
    """Test vals2coeffs with empty input.

    This test verifies that calling _vals2coeffs with an empty array returns an empty array.
    """
    assert _vals2coeffs(np.array([])).size == 0


def test_coeffs2vals_empty():
    """Test coeffs2vals with empty input.

    This test verifies that calling _coeffs2vals with an empty array returns an empty array.
    """
    assert _coeffs2vals(np.array([])).size == 0


def test_vals2coeffs_size1():
    """Test vals2coeffs with size 1 input.

    This test verifies that calling _vals2coeffs with a size 1 array returns the same array
    within machine precision.
    """
    for k in np.arange(10):
        fk = np.array([k])
        assert np.max(_vals2coeffs(fk) - fk) <= eps


def test_coeffs2vals_size1():
    """Test coeffs2vals with size 1 input.

    This test verifies that calling _coeffs2vals with a size 1 array returns the same array
    within machine precision.
    """
    for k in np.arange(10):
        ak = np.array([k])
        assert np.max(_coeffs2vals(ak) - ak) <= eps


# TODO: further checks for chepbts


# ------------------------------------------------------------------------
# Tests to verify the mutually inverse nature of vals2coeffs and coeffs2vals
# ------------------------------------------------------------------------
# Generate test sizes
np.random.seed(0)  # Ensure reproducibility
test_sizes = 2 ** np.arange(2, 18, 2) + 1


@pytest.mark.parametrize("n", test_sizes)
def test_vals2coeffs2vals(n):
    """Test that vals2coeffs followed by coeffs2vals returns the original values.

    This test verifies that the transformation from values to coefficients and back
    is approximately the identity operation within a tolerance that scales with the
    size of the input.

    Args:
        n: Size of the test array
    """
    values = np.random.rand(n)
    coeffs = _vals2coeffs(values)
    _values_ = _coeffs2vals(coeffs)
    assert np.max(values - _values_) <= scaled_tol(n)


@pytest.mark.parametrize("n", test_sizes)
def test_coeffs2vals2coeffs(n):
    """Test that coeffs2vals followed by vals2coeffs returns the original coefficients.

    This test verifies that the transformation from coefficients to values and back
    is approximately the identity operation within a tolerance that scales with the
    size of the input.

    Args:
        n: Size of the test array
    """
    coeffs = np.random.rand(n)
    values = _coeffs2vals(coeffs)
    _coeffs_ = _vals2coeffs(values)
    assert np.max(coeffs - _coeffs_) <= scaled_tol(n)


# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# Test second-kind Chebyshev points
# ------------------------------------------------------------------------
chebpts2_testlist = [
    (1, np.array([0.0]), eps),
    (2, np.array([-1.0, 1.0]), eps),
    (3, np.array([-1.0, 0.0, 1.0]), eps),
    (4, np.array([-1.0, -0.5, 0.5, 1.0]), 2 * eps),
    (
        5,
        np.array([-1.0, -(2.0 ** (-0.5)), 0.0, 2.0 ** (-0.5), 1.0]),
        eps,
    ),
]


@pytest.mark.parametrize("n, expected, tol", chebpts2_testlist)
def test_chebpts_values(n, expected, tol):
    """Test that Chebyshev points have the expected values.

    This test verifies that the Chebyshev points generated by _chebpts
    match the expected values within the specified tolerance.

    Args:
        n: Number of Chebyshev points
        expected: Expected values of the Chebyshev points
        tol: Tolerance for the comparison
    """
    actual = Chebtech2._chebpts(n)
    assert np.max(actual - expected) <= tol


# Test Chebyshev points properties for various sizes
chebpts_len_sizes = 2 ** np.arange(2, 18, 2) + 3


@pytest.mark.parametrize("k", chebpts_len_sizes)
def test_chebpts_properties(k):
    """Test properties of Chebyshev points.

    This test verifies that the Chebyshev points have the expected properties:
    1. The array has the correct length
    2. The first point is -1.0
    3. The last point is 1.0
    4. The points are monotonically increasing

    Args:
        k: Number of Chebyshev points
    """
    pts = Chebtech2._chebpts(k)
    assert pts.size == k
    assert pts[0] == -1.0
    assert pts[-1] == 1.0
    assert np.all(np.diff(pts) > 0)


# ------------------------------------------------------------------------
